<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssofun.admin.store.mapper.StoreAdminSqlMapper">

<!-- 대시보드 -->
<!-- 총 매출 계산 -->
<select id="selectTotalPrice" resultType="int">
	SELECT SUM(tp.price * poi.count) AS total_price
	FROM tb_product tp
	INNER JOIN tb_product_order_item poi ON tp.product_id = poi.product_id
	WHERE tp.admin_id IN (
	  SELECT ta2.admin_id 
	  FROM tb_admin ta2 
	  WHERE ta2.biz_id = (SELECT ta.biz_id FROM tb_admin ta WHERE ta.admin_id = #{adminId})
	) AND poi.product_order_status_id IN (3, 4, 5, 6, 7)
</select>
<!-- 모든 상품수 -->
<select id="selectTotalProductCount" resultType="int">
	select 
		COUNT(tp.product_id) AS total_product_count
	from tb_product tp
	where tp.admin_id in (
		select ta2.admin_id 
		from tb_admin ta2 
		where ta2.biz_id = (select ta.biz_id from tb_admin ta where ta.admin_id = #{adminId})
	)
</select>
<!-- 총 리뷰수 -->
<select id="selectTotalProductReviewCount" resultType="int">
	select  
	    SUM((
			select count(*) from tb_product_order_item poi 
				inner join tb_product_review tpr on tpr.product_order_item_id = poi.product_order_item_id
	        where poi.product_id = tp.product_id
		)) as review_cnt  
	from tb_product tp
	where tp.admin_id in (
		select ta2.admin_id 
		from tb_admin ta2 
		where ta2.biz_id = (select ta.biz_id from tb_admin ta where ta.admin_id = #{adminId})
	)
</select>
<!-- 총 평점 -->
<select id="selectProductReviewAvgScore" resultType="java.lang.Double">
	select 
	     TRUNCATE(nvl(AVG((
			select avg(tpr.rate) from tb_product_order_item poi inner join tb_product_review tpr on tpr.product_order_item_id = poi.product_order_item_id
	        where poi.product_id = tp.product_id
	    )),0),2) as review_avg_score    
	from tb_product tp
	where tp.admin_id in (
		select ta2.admin_id 
		from tb_admin ta2 
		where ta2.biz_id = (select ta.biz_id from tb_admin ta where ta.admin_id = #{adminId})
	)
</select>

<!-- 리스트시작 -->
<!-- 상품리스트 -->
<select id="dashboardProductList" resultType="com.ssofun.dto.ProductDto">
	select tp.*
	from tb_product tp
	where tp.admin_id in (
		select ta2.admin_id 
		from tb_admin ta2 
		where ta2.biz_id = (select ta.biz_id from tb_admin ta where ta.admin_id = #{adminId})
	)
	AND tp.used_fg = 1
	ORDER BY tp.created_at DESC
	LIMIT 5
</select>
<!-- 오더리스트 -->
<select id="dashboardProductOrderList" resultType="com.ssofun.dto.ProductDto">
	select 
		poi.product_order_item_id,
		poi.created_at AS order_created_at,
	    dr.name AS delivery_recipient_name,
	    tp.name AS product_name,
	    poi.count,
	    tp.price,
	    tp.price_sale
	from tb_product tp
	INNER JOIN tb_product_order_item poi ON tp.product_id = poi.product_id
	INNER JOIN tb_product_order_status pos ON poi.product_order_status_id = pos.product_order_status_id
	INNER JOIN tb_product_order po ON poi.product_order_id = po.product_order_id
	INNER JOIN tb_delivery_recipient dr ON poi.delivery_recipient_id = dr.delivery_recipient_id
	where tp.admin_id in (
		select ta2.admin_id 
		from tb_admin ta2 
		where ta2.biz_id = (select ta.biz_id from tb_admin ta where ta.admin_id = #{adminId})
	)
	AND tp.used_fg = 1
	ORDER BY poi.created_at DESC, poi.product_order_item_id DESC
	LIMIT 5
</select>
<!-- 상품리스트(리뷰,평점) -->
<select id="dashboardproductReviewList" resultType="com.ssofun.dto.HyunMinProductReviewListDto">
	select 
		tp.*, 
	    (
			select count(*) from tb_product_order_item poi 
				inner join tb_product_review tpr on tpr.product_order_item_id = poi.product_order_item_id
	        where poi.product_id = tp.product_id
		) as review_cnt,
	    nvl((
			select FORMAT(avg(tpr.rate),2) from tb_product_order_item poi inner join tb_product_review tpr on tpr.product_order_item_id = poi.product_order_item_id
	        where poi.product_id = tp.product_id
	    ), 0) as review_avg_score    
	from tb_product tp
	where tp.admin_id in (
		select ta2.admin_id 
		from tb_admin ta2 
		where ta2.biz_id = (select ta.biz_id from tb_admin ta where ta.admin_id = #{admin_id} AND ta.used_fg = 1)
	)
	ORDER BY tp.product_id
	LIMIT 5
</select>
<!-- 리스트끝 -->
<!-- 대시보드 끝 -->

<!-- 카테고리타입리스트 -->
<select id="categoryTypeList" resultType="com.ssofun.dto.ProductCategoryTypeDto">
	select * from tb_product_category_type WHERE node = 2 AND used_fg = 1
</select>

<!-- 진행상태리스트 -->
<select id="orderStatusList" resultType="com.ssofun.dto.ProductOrderStatusDto">
	SELECT * FROM tb_product_order_status WHERE used_fg = 1
</select>

<!-- 모든상품리스트 -->
<select id="selectAll" resultType="com.ssofun.dto.HyunMinProductJoinDto">
	SELECT 
	    pc.product_category_type_id,  
	    pc.product_id,
	    p.admin_id,
	    b.biz_name,
	    pct.name AS category_type_name,
	    p.name AS product_name,
	    p.price,
	    p.price_sale,
	    p.contents,
	    p.created_at,
	    t.name AS thumbnail_name
	FROM tb_product p
    INNER JOIN tb_product_category pc ON p.product_id = pc.product_id
	INNER JOIN tb_product_category_type pct ON pc.product_category_type_id = pct.product_category_type_id
	INNER JOIN tb_admin a ON p.admin_id = a.admin_id
	INNER JOIN tb_biz b ON a.biz_id = b.biz_id
	INNER JOIN(
	    SELECT product_id, MIN(name) AS name
	    FROM tb_product_thumbnail
	    GROUP BY product_id
	) AS t ON p.product_id = t.product_id
	where p.admin_id in (
		select ta2.admin_id 
		from tb_admin ta2 
		where ta2.biz_id = (select ta.biz_id from tb_admin ta where ta.admin_id = #{admin_id} AND ta.used_fg = 1)
	)
	AND p.used_fg = 1
	ORDER BY p.created_at DESC
	LIMIT 0,1000	
</select>

<!-- 상품 등록 -->
<insert id="productInsert">
   INSERT INTO tb_product(admin_id,name,price,price_sale,contents,created_at) 
      VALUES(
         #{admin_id},
         #{name},
         #{price},
         #{price_sale},
         #{contents},
         CURRENT_TIMESTAMP()
         )
</insert>

<!-- 썸네일 등록 -->
<insert id="productThumbnaillInsert">
   INSERT INTO tb_product_thumbnail(product_id,name,order_list) 
      VALUES(
         (SELECT MAX(product_id) FROM tb_product),
         #{name},
         #{order_list}
         )
</insert>

<!-- 상세이미지 등록 -->
<insert id="productDetailImageInsert">
   INSERT INTO tb_product_detail_image(product_id,name,order_list) 
      VALUES(
         (SELECT MAX(product_id) FROM tb_product),tb_product_review
         #{name},
         #{order_list}
         )
</insert>

<!-- 카테고리타입등록 -->
<insert id="productcategorytypeInsert">
    INSERT INTO tb_product_category_type(this_parent_id, node, name)
    VALUES (
    #{this_parent_id},
    #{node},
    #{name}
    )
</insert>

<!-- 카테고리등록 -->
<insert id="productcategoryInsert">
   INSERT INTO tb_product_category(product_category_type_id,product_id)
   VALUES(
         #{product_category_type_id},
         (SELECT MAX(product_id) FROM tb_product)
      )
</insert>

<!-- 상품상세보기 -->
<select id="productDetail" resultType="com.ssofun.dto.HyunMinProductJoinDto">
	SELECT 
	    pc.product_category_type_id,  
	    pc.product_id,
	    p.admin_id,
	    b.biz_name,
	    pct.name AS category_type_name,
	    p.name AS product_name,
	    p.price,
	    p.price_sale,
	    p.contents,
	    p.created_at,
    	p.used_fg AS product_used_fg
	FROM tb_product p
	INNER JOIN tb_product_category pc ON p.product_id = pc.product_id
	INNER JOIN tb_product_category_type pct ON pc.product_category_type_id = pct.product_category_type_id
	INNER JOIN tb_admin a ON p.admin_id = a.admin_id
	INNER JOIN tb_biz b ON a.biz_id = b.biz_id
	WHERE p.product_id = #{product_id} AND p.used_fg = 1
</select>	

<!-- 썸네일리스트 -->
<select id="productThumbnailDetail" resultType="com.ssofun.dto.ProductThumbnailDto">
	SELECT * FROM tb_product_thumbnail WHERE product_id = #{product_id} AND used_fg = 1
</select>

<!-- 상품상세이미지 리스트 -->
<select id="productDetailImageList" resultType="com.ssofun.dto.ProductDetailImageDto">
	SELECT * FROM tb_product_detail_image WHERE product_id = #{product_id} AND used_fg = 1
</select>

<!-- 상품수정 -->
<select id="selectByProductId" resultType="com.ssofun.dto.ProductDto">
	SELECT * FROM tb_product WHERE product_id = #{product_id} AND used_fg = 1
</select>
<insert id="productUpdate2">
	INSERT INTO tb_product(admin_id,name,price,price_sale,contents,created_at,used_fg) 
		VALUES(
			#{admin_id},
			#{name},
			#{price},
			#{price_sale},
			#{contents},
			CURRENT_TIMESTAMP(),
			1
			)
</insert>
<update id="productUpdateUsedFg">
	UPDATE tb_product 
		SET used_fg = 0
		WHERE product_id = #{product_id}
</update>

<!-- 상품삭제 -->
<update id="productDelete">
	UPDATE tb_product 
		SET used_fg = 0
		WHERE product_id = #{product_id}
</update>

<!-- 상품수정 찐 -->
<update id="productUpdate">
	UPDATE tb_product
	SET name = #{name}, price = #{price}, price_sale = #{price_sale}, contents = #{contents}, created_at = CURRENT_TIMESTAMP()
	WHERE product_id = #{product_id}
</update>
<!-- 썸네일수정 -->
<insert id="productThumbnaillUpdate">
	INSERT INTO tb_product_thumbnail(product_id,name,order_list,created_at,used_fg) 
		VALUES(
			#{product_id},
			#{name},
			#{order_list},
			CURRENT_TIMESTAMP(),
			1
			)
</insert>
<update id="productThumbnaillUpdateUsedFg">
	UPDATE tb_product_thumbnail 
		SET used_fg = 0 
		WHERE product_thumbnail_id = #{product_thumbnail_id}
</update>

<!-- 카테고리 수정 -->
<insert id="productcategoryUpdate">
   INSERT INTO tb_product_category(product_category_type_id,product_id)
   VALUES(
         #{product_category_type_id},
         #{product_id}
      )
</insert>

<!-- 주문아이템등록 -->
<insert id="productOrderItemInsert">
	INSERT INTO tb_product_order_item(product_order_id,product_id,product_order_status_id,delivery_recipient_id,count,created_at,used_fg) 
		VALUES(
				#{product_order_id},
				#{product_id},
				#{product_order_status_id},
				#{delivery_recipient_id},
				#{count},
				CURRENT_TIMESTAMP(),
				1
			)
</insert>

<!-- N번 관리자가 판매하는 모든상품의 주문내역(오더리스트) -->
<select id="productOrderItemList" resultType="com.ssofun.dto.ProductOrderItemDto">
	SELECT 
		distinct(poi.product_order_item_id),
		p.admin_id,
	    poi.created_at,
	    dr.name AS recipient_name,
		pos.name AS order_status_name,
	    p.name AS product_name,
	    poi.count,
	    p.price,
	    p.price_sale,
	    dr.delivery_recipient_id
	FROM tb_product_order_item poi
		INNER JOIN tb_product_order_status pos ON poi.product_order_status_id = pos.product_order_status_id
		INNER JOIN tb_product p ON poi.product_id = p.product_id
	    INNER JOIN tb_product_category pc ON p.product_id = pc.product_id
	    INNER JOIN tb_product_category_type pct ON pc.product_category_type_id = pct.product_category_type_id
	    INNER JOIN tb_admin a ON p.admin_id = a.admin_id
	    INNER JOIN tb_biz b ON a.biz_id = b.biz_id
	    INNER JOIN tb_delivery_recipient dr ON poi.delivery_recipient_id = dr.delivery_recipient_id
	    INNER JOIN tb_product_order po ON poi.product_order_id = po.product_order_id
	    INNER JOIN(
	    SELECT product_id, MIN(name) AS name
	    FROM tb_product_thumbnail
	    GROUP BY product_id
	) AS t ON p.product_id = t.product_id
	where p.admin_id in (
		select ta2.admin_id 
		from tb_admin ta2 
		where ta2.biz_id = (select ta.biz_id from tb_admin ta where ta.admin_id = #{adminId} AND ta.used_fg = 1)
	) 
	AND poi.used_fg = 1
	ORDER BY poi.created_at DESC, product_order_item_id DESC
	LIMIT 20
</select>
<!-- N번 관리자가 판매하는 상품중 주문된 하나의 상품상세보기(오더리스트 상세보기) -->
<select id="orderItemDetail" resultType="com.ssofun.dto.ProductOrderItemDto">
	 	SELECT 
		poi.product_order_item_id,
	    b.biz_name,
	    pct.name AS category_type_name,
	    p.name AS product_name,
	    t.name AS thumbnail_name,
	    p.price,
	    poi.count,   
	    pos.name AS order_status_name,
	    poi.created_at,
	    poi.delivery_recipient_id,
	    poi.product_order_status_id,
		dr.name AS recipient_name,
	    dr.address_post,
	    dr.address_default,
	    dr.address_detail,
	    dr.request_message
	FROM tb_product_order_item poi
		INNER JOIN tb_product_order_status pos ON poi.product_order_status_id = pos.product_order_status_id
		INNER JOIN tb_product p ON poi.product_id = p.product_id
	    INNER JOIN tb_product_category pc ON p.product_id = pc.product_id
	    INNER JOIN tb_product_category_type pct ON pc.product_category_type_id = pct.product_category_type_id
	    INNER JOIN tb_admin a ON p.admin_id = a.admin_id
	    INNER JOIN tb_biz b ON a.biz_id = b.biz_id
	    INNER JOIN tb_delivery_recipient dr ON poi.delivery_recipient_id = dr.delivery_recipient_id
	    INNER JOIN(
	    SELECT product_id, MIN(name) AS name
	    FROM tb_product_thumbnail
	    GROUP BY product_id
	) AS t ON p.product_id = t.product_id
	WHERE product_order_item_id = #{product_order_item_id} AND poi.used_fg = 1
	ORDER BY poi.created_at DESC
</select>

<!-- 진행상태수정 -->
<!-- 판매자확인완료 -->
<update id="adminCheckUpdate">
	UPDATE tb_product_order_item SET product_order_status_id = 4
	WHERE product_order_item_id = #{product_order_item_id}
</update>

<!-- 택배사리스트 -->
<select id="deliveryCompanyList" resultType="com.ssofun.dto.DeliveryCompanyDto">
	SELECT * FROM tb_delivery_company WHERE used_fg = 1
</select>

<!-- 펀딩 결제전 주문 정보 입력 -->
<insert id="deliveryInsert" parameterType="com.ssofun.dto.DeliveryCompanyDto" keyProperty="delivery_id">
	INSERT INTO tb_delivery(delivery_company_id,delivery_status_id,delivery_recipient_id,invoice_no,created_at,used_fg) 
	VALUE(
			#{delivery_company_id},
			NULL,
			#{delivery_recipient_id},
			#{invoice_no},
			CURRENT_TIMESTAMP(),
			1
		)
		
	 	<!-- PK 조회를 위한 selectKey -->
		<selectKey keyProperty="delivery_id" resultType="int" order="AFTER">
		  SELECT LAST_INSERT_ID()
		</selectKey>
		
</insert>
<!--카테고리별 오더리스트 -->	
<select id="orderItemCategoryList" resultType="com.ssofun.dto.ProductOrderItemDto">
	SELECT 
		poi.product_order_item_id,
	    poi.created_at,
	    dr.name AS recipient_name,
		pos.name AS order_status_name,
	    p.name AS product_name,
	    poi.count,
	    p.price,
	    dr.delivery_recipient_id
	FROM tb_product_order_item poi
		INNER JOIN tb_product_order_status pos ON poi.product_order_status_id = pos.product_order_status_id
		INNER JOIN tb_product p ON poi.product_id = p.product_id
	    INNER JOIN tb_product_category pc ON p.product_id = pc.product_id
	    INNER JOIN tb_product_category_type pct ON pc.product_category_type_id = pct.product_category_type_id
	    INNER JOIN tb_admin a ON p.admin_id = a.admin_id
	    INNER JOIN tb_biz b ON a.biz_id = b.biz_id
	    INNER JOIN tb_delivery_recipient dr ON poi.delivery_recipient_id = dr.delivery_recipient_id
	    INNER JOIN tb_product_order po ON poi.product_order_id = po.product_order_id
	    INNER JOIN(
	    SELECT product_id, MIN(name) AS name
	    FROM tb_product_thumbnail
	    GROUP BY product_id
	) AS t ON p.product_id = t.product_id
	WHERE a.admin_id = #{admin_id} AND pos.product_order_status_id = #{product_order_status_id} AND poi.used_fg = 1
	ORDER BY poi.created_at DESC
</select>

<!-- 배송중수정 -->
<update id="deliveryingUpdate">
	UPDATE tb_product_order_item SET product_order_status_id = 5 
	WHERE product_order_item_id = #{product_order_item_id}
</update>

<!-- 발송리스트 -->
<select id="deliveryList" resultType="com.ssofun.dto.DeliveryDto">
	SELECT * FROM tb_delivery WHERE used_fg = 1
</select>
<!-- 발송상세보기 -->
<select id="deliveryDetail" resultType="com.ssofun.dto.ProductOrderItemDto">
	SELECT 
		d.delivery_id,
		dr.delivery_recipient_id,
		d.invoice_no,
		d.created_at AS delivery_created_at,
		dc.name AS delivery_company_name
	FROM tb_product_order_item poi
		INNER JOIN tb_delivery_recipient dr ON poi.delivery_recipient_id = dr.delivery_recipient_id
	    INNER JOIN tb_delivery d ON dr.delivery_recipient_id = d.delivery_recipient_id
	    INNER JOIN tb_delivery_company dc ON d.delivery_company_id = dc.delivery_company_id
	WHERE product_order_item_id = #{product_order_item_id} AND poi.used_fg = 1
</select>

<!-- 상품리스트(리뷰,평점) -->
<select id="productReviewList" resultType="com.ssofun.dto.HyunMinProductReviewListDto">
	select 
		tp.*, 
	    (
			select count(*) from tb_product_order_item poi 
				inner join tb_product_review tpr on tpr.product_order_item_id = poi.product_order_item_id
	        where poi.product_id = tp.product_id
		) as review_cnt,
	    nvl((
			select FORMAT(avg(tpr.rate),2) from tb_product_order_item poi inner join tb_product_review tpr on tpr.product_order_item_id = poi.product_order_item_id
	        where poi.product_id = tp.product_id
	    ), 0) as review_avg_score    
	from tb_product tp
	where tp.admin_id in (
		select ta2.admin_id 
		from tb_admin ta2 
		where ta2.biz_id = (select ta.biz_id from tb_admin ta where ta.admin_id = #{admin_id} AND ta.used_fg = 1)
	)
	ORDER BY review_cnt DESC
</select>

<!-- 상품하나에 대한 리뷰 리스트 -->
<select id="productDetailReviewList" resultType="com.ssofun.dto.HyunMinProductReviewListDto">
	SELECT 
	    p.product_id,
	    p.name,
	    pr.product_review_id,
		u.nickname,
	    pr.rate,
	    pr.contents,
	    pr.created_at
	FROM tb_product_review pr
	    INNER JOIN tb_product_order_item poi ON pr.product_order_item_id = poi.product_order_item_id
	    INNER JOIN tb_product p ON poi.product_id = p.product_id
	    INNER JOIN tb_user u ON pr.user_id = u.user_id
	WHERE p.product_id = #{product_id} AND pr.used_fg = 1
ORDER BY pr.created_at DESC
</select>

<!-- 상품하나에 대한 리뷰이미지 리스트 -->
<select id="productReviewImageList" resultType="com.ssofun.dto.ProductReviewImageDto">
	SELECT pri.url 
	FROM tb_product_review_image pri
		INNER JOIN tb_product_review pr ON pri.product_review_id = pr.product_review_id
	    INNER JOIN tb_product_order_item poi ON pr.product_order_item_id = poi.product_order_item_id
	    INNER JOIN tb_product p ON poi.product_id = p.product_id
	WHERE p.product_id = #{product_id} AND pri.used_fg = 1
</select>

<!-- 문의리스트 -->
<select id="qnaContentsList" resultType="com.ssofun.dto.HyunMinQnaJoinDto">
	SELECT 
		q.admin_id,
		q.qna_id,
	    b.biz_name,
	    u.email,
	    u.nickname,
	    q.title,
	    q.contents,
	    q.answer_contents,
	    q.answer_created_at,
	    q.created_at
	FROM tb_qna q
		INNER JOIN tb_admin a ON q.admin_id = a.admin_id
	    INNER JOIN tb_biz b ON a.biz_id = b.biz_id
	    INNER JOIN tb_user u ON q.user_id = u.user_id
	    INNER JOIN (
	        SELECT DISTINCT ta2.admin_id 
	        FROM tb_admin ta2 
	        WHERE ta2.biz_id IN (SELECT tb.biz_id FROM tb_admin tb WHERE tb.admin_id = #{adminId} AND tb.used_fg = 1)
	    ) sub ON a.admin_id = sub.admin_id
	WHERE q.used_fg = 1
	ORDER BY created_at DESC
	LIMIT 0, 300
</select>

<!-- 문의내용상세보기 -->
<select id="qnaContentDetail" resultType="com.ssofun.dto.HyunMinQnaJoinDto">
	SELECT 
		q.admin_id,
		q.qna_id,
	    b.biz_name,
	    u.email,
	    u.nickname,
	    q.title,
	    q.contents,
	    q.answer_contents,
	    q.answer_created_at,
	    q.created_at
	FROM tb_qna q
		INNER JOIN tb_admin a ON q.admin_id = a.admin_id
	    INNER JOIN tb_biz b ON a.biz_id = b.biz_id
	    INNER JOIN tb_user u ON q.user_id = u.user_id
	    INNER JOIN (
	        SELECT DISTINCT ta2.admin_id 
	        FROM tb_admin ta2 
	        WHERE ta2.biz_id IN (SELECT tb.biz_id FROM tb_admin tb WHERE tb.used_fg = 1)
	    ) sub ON a.admin_id = sub.admin_id
	WHERE q.qna_id = #{qna_id} AND q.used_fg = 1
	ORDER BY created_at DESC
	LIMIT 0, 300
</select>
<!-- 답글등록 -->
<update id="answerContentsInsert">
	UPDATE tb_qna SET 
	answer_contents = #{answer_contents}, 
	answer_created_at = CURRENT_TIMESTAMP()  
	WHERE qna_id =#{qna_id}
</update>

<!-- 통계그래프 접근금지 -->
<select id="getSalesYear" resultType="map">
	select 
		DATE_FORMAT(tpoi.created_at, '%m') as month,
		sum(tpoi.count * tp.price_sale) as sales
	from tb_product tp
	inner join tb_product_order_item tpoi on tpoi.product_id = tp.product_id
	where tp.admin_id in (
		select ta2.admin_id from tb_admin ta2 where ta2.biz_id = (select ta.biz_id from tb_admin ta where ta.admin_id = #{adminId})
	)
	and CAST(DATE_FORMAT(tpoi.created_at, '%Y') AS UNSIGNED) = #{year}
	group by DATE_FORMAT(tpoi.created_at, '%m')
</select>

</mapper>